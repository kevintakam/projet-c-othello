#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define vide 0  //cases que peut choisir le joueur
#define noir 1
#define blanc 2
#define interdit 3 //cases interdites au joueur
#define Unfilled 60  //nombre de cases à remlplir
#define True 1
#define False 0

int g_i_tour = 0;
int g_i_save=0 ; //old game or new game
int g_i_nbnoir = 2, g_i_nbblanc = 2;
int g_i_win_p1 = False, g_i_win_p2 = False, g_i_egalite = False;
int g_i_BLACK[Unfilled][2];     //historique des mouvements du noir
int g_i_WHITE[Unfilled][2];		//historique des mouvements du blanc

char g_c_choix_jeu, g_c_mode = '0'; //mode=1 is easy; mode 2 is hard



void init_board(int i_board[9][9])
{
	int i, j;
	for (i = 1; i < 9; i++)
	{
		for (j = 1; j < 9; j++)
		{
			i_board[i][j] = interdit;
		}
	}
	i_board[4][4] = blanc;
	i_board[5][5] = blanc;
	i_board[4][5] = noir;
	i_board[5][4] = noir;

	g_i_nbnoir = 2;
	g_i_nbblanc = 2;
	g_i_win_p1 = False;
	g_i_win_p2 = False;
	g_i_egalite = False;
}
void re_init(int i_board[9][9])
{
	int i, j;
	for (i = 1; i < 9; i++)
	{
		for (j = 1; j < 9; j++)
		{
			if (i_board[i][j] == vide)
			{
				i_board[i][j] = interdit;
			}
		}
	}
}
int ennemi(int i_player)
{
	if (i_player == noir)
	{
		return blanc;
	}
	else if (i_player == blanc)
	{
		return noir;
	}
	printf("\n!!!!!!! Invalid player !!!!!!!\n");
	return -1;
}
void count_pieces(int i_board[9][9])
{
	int i, j;
	g_i_nbnoir = 0; g_i_nbblanc = 0;
	for (i = 1; i < 9; i++)
	{
		for (j = 1; j < 9; j++)
		{
			if (i_board[i][j] == 1)
			{
				g_i_nbnoir++;
			}
			else if (i_board[i][j] == 2)
			{
				g_i_nbblanc++;
			}
		}
	}
}
void gagner(int i_board[9][9])
{
	count_pieces(i_board);
	int i_fill=g_i_nbblanc+g_i_nbnoir;
	if (i_fill >=64)  //board est rempli
	{
		if (g_i_nbnoir == g_i_nbblanc)
		{
			g_i_egalite = True;
		}
		else if (g_i_nbnoir > g_i_nbblanc)
		{
			g_i_win_p1 = True;
		}
		else if (g_i_nbnoir < g_i_nbblanc)
		{
			g_i_win_p2 = True;
		}
	}
	else
	{
		if (g_i_nbnoir == 0)
		{
			g_i_win_p2 = True;
		}
		else if (g_i_nbblanc == 0)
		{
			g_i_win_p1 = True;
		}
	}
}
void print_board(int i_board[9][9])
{
	int i, j;
	char c_sign;
	count_pieces(i_board);

	printf("Tour: %d\n\n", g_i_tour);
	printf("     1   2   3   4   5   6   7   8   | black: %d | white: %d |  (PAUSE)\n", g_i_nbnoir, g_i_nbblanc);
	printf("__________________________________	\n");
	for (i = 1; i < 9; i++)
	{
		printf("%d  | ", i);
		for (j = 1; j < 9; j++)
		{
			if (i_board[i][j] == vide)
			{
				c_sign = 'x';
				if (j == 8)
				{
					printf("%c\n", c_sign);
				}
				else
				{
					printf("%c   ", c_sign);
				}
			}
			else if (i_board[i][j] == noir)
			{
				c_sign = 'B';
				if (j == 8)
				{
					printf("%c\n", c_sign);
				}
				else
				{
					printf("%c   ", c_sign);
				}
			}
			else if (i_board[i][j] == blanc)
			{
				c_sign = 'W';
				if (j == 8)
				{
					printf("%c\n", c_sign);
				}
				else
				{
					printf("%c   ", c_sign);
				}
			}
			else if (i_board[i][j] == interdit)
			{
				c_sign = '.';
				if (j == 8)
				{
					printf("%c\n", c_sign);
				}
				else
				{
					printf("%c   ", c_sign);
				}
			}
		}
		printf("\n");
	}
	printf("\n");
}
int move_in(int x, int y, int i_player)  //appartient au board ou non
{
	if ((x > 8 || x < 1 || y < 1 || y>8))
	{
		if ((g_c_choix_jeu == '1') || (i_player == noir && g_c_choix_jeu == '2'))
		{
			printf("Invalid move.\n");
		}
		return 0;
	}
	return 1;
}
int move_to(int x, int y, int i_board[9][9], int i_player)  //case vide ou non
{
	switch (i_board[x][y])
	{
	case vide:
	{
		return 1;
	}
	case noir:
	case blanc:
	{
		if ((g_c_choix_jeu == '1') || (i_player == noir && g_c_choix_jeu == '2'))
		{
			printf("Case d\212j\205 remplie.\n");
		}
		return 0;
	}
	case interdit:
	{
		if ((g_c_choix_jeu == '1') || (i_player == noir && g_c_choix_jeu == '2'))
		{
			printf("Case interdite.\n");
		}
		return 0;
	}
	default:
	{
		return 0;
	}
	}
}

//////////////////////////////////////////////////////////////
//on verifie s'il y a des pieces de l'adv dans les 8 directions, and return position
int check_up(int i_player, int i_board[9][9], int x, int y)
{
	int i_p, i, i_pos_up = x;
	if (x == 1)
	{
		return 0;
	}
	i_p = ennemi(i_player);
	i = x - 1;
	while (i > 0)
	{
		if (i_board[i][y] == i_p)
		{
			i--;
		}
		else if (i_board[i][y] == i_player)
		{
			i_pos_up = i;
			return i_pos_up;
		}
		else
		{
			break;
		}
	}
	return 0;
}
int check_down(int i_player, int i_board[9][9], int x, int y)
{
	int i_p, i, i_pos_down = x;
	if (x == 8)
	{
		return 0;
	}
	i_p = ennemi(i_player);
	i = x + 1;
	while (i < 9)
	{
		if (i_board[i][y] == i_p)
		{
			i++;
		}
		else if (i_board[i][y] == i_player)
		{
			i_pos_down = i;
			return i_pos_down;
		}
		else
		{
			break;
		}
	}
	return 0;
}
int check_left(int i_player, int i_board[9][9], int x, int y)
{
	int i_p, j, i_pos_left = y;
	if (y == 1)
	{
		return 0;
	}
	i_p = ennemi(i_player);
	j = y - 1;
	while (j > 0)
	{
		if (i_board[x][j] == i_p)
		{
			j--;
		}
		else if (i_board[x][j] == i_player)
		{
			i_pos_left = j;
			return i_pos_left;
		}
		else
		{
			break;
		}
	}

	return 0;
}
int check_right(int i_player, int i_board[9][9], int x, int y)
{
	int i_p, j, i_pos_right = y;
	if (y == 8)
	{
		return 0;
	}
	i_p = ennemi(i_player);
	j = y + 1;
	while (j < 9)
	{
		if (i_board[x][j] == i_p)
		{
			j++;
		}
		else if (i_board[x][j] == i_player)
		{
			i_pos_right = j;
			return i_pos_right;
		}
		else
		{
			break;
		}
	}

	return 0;
}
int check_right_up(int i_player, int i_board[9][9], int x, int y)
{
	int i_p, i, j;
	if (x == 1 || y == 8)
	{
		return 0;
	}
	i_p = ennemi(i_player);
	i = x - 1; j = y + 1;
	while (i > 0 && j <= 8)
	{
		if (i_board[i][j] == i_p)
		{
			i--; j++;
		}
		else if (i_board[i][j] == i_player)
		{
			return i*10+j;
		}
		else
		{
			return 0;
		}
	}
	return 0;
}
int check_right_down(int i_player, int i_board[9][9], int x, int y)
{
	int i_p, i, j;
	if (x == 8 || y == 8)
	{
		return 0;
	}
	i_p = ennemi(i_player);
	i = x + 1; j = y + 1;
	while (i <= 8 && j <= 8)
	{
		if (i_board[i][j] == i_p)
		{
			i++; j++;
		}
		else if (i_board[i][j] == i_player)
		{
			return i*10+j;
		}
		else
		{
			return 0;
		}
	}
	return 0;
}
int check_left_up(int i_player, int i_board[9][9], int x, int y)
{
	int i_p, i, j;
	if (x == 1 || y == 1)
	{
		return 0;
	}
	i_p = ennemi(i_player);
	i = x - 1; j = y - 1;
	while (i > 0 && j > 0)
	{
		if (i_board[i][j] == i_p)
		{
			i--; j--;
		}
		else if (i_board[i][j] == i_player)
		{
			return i*10+j;
		}
		else
		{
			return 0;
		}
	}
	return 0;
}
int check_left_down(int i_player, int i_board[9][9], int x, int y)
{
	int i_p, i, j;
	if (x == 8 || y == 1)
	{
		return 0;
	}
	i_p = ennemi(i_player);
	i = x + 1; j = y - 1;
	while (j > 0 && i < 9)
	{
		if (i_board[i][j] == i_p)
		{
			i++; j--;
		}
		else if (i_board[i][j] == i_player)
		{
			return i*10+j;
		}
		else
		{
			return 0;
		}
	}
	return 0;
}

/*Le principe est de chercher chaque case de couleur adverse et voir s'il est
possible que le joueur choisissent une des cases qui l'entoure.

Si le joueur est Black est ex, il cherche les cases blanches.

Pour une case blanche (i,j)donné on vérifie si un flip est possisble dans une des 8
directions en utilisant les cases sui l'entourent. Le vérification se fait dans
le direction contraire de la case qu'ont a choisit:

-->Par exemple, pour vérifier si Black peut jouer dans la case à droite(i,j+1)
de la case blanche (i,j), on vérifie si un flip est possible à gauche (i,<j) grâce à
la fonction check_left. Pour vérifier si Black peut jouer dans la case en haut
(i-1,j) de la case blanche (i,j), on vérifie si un flip est possible en bas
(i<,j) grâce à la fonction check_down.

Le case est marqué "vide" si elle permet un flip.
*/

int can_move(int i_player, int i_board[9][9])
{
	int i, j, i_p, i_empty = 0;
	int u, d, l, r, ru, rd, lu, ld;  //up,down,left,right,right-up,...left-down
	int ix;
	i_p = ennemi(i_player);
	for (i = 1; i < 9; i++) //dans le cas général
	{
		for (j = 1; j < 9; j++)
		{
			if (i_board[i][j] == i_p) //par ex si BLACK joue on cherche les pieces blanches et vice versa
			{
				if (i_board[i - 1][j] == interdit && (i > 1))  //check up
				{
					d = check_down(i_player, i_board, i - 1, j);
					if (d != 0 && (d - (i - 1) >= 2))
					{
						i_board[i - 1][j] = vide; i_empty++;
					}

				}

				if (i_board[i + 1][j] == interdit && (i < 8))	//check down
				{
					u = check_up(i_player, i_board, i + 1, j);
					if (u != 0 && ((i + 1) - u >= 2))
					{
						i_board[i + 1][j] = vide; i_empty++;
					}
				}

				if (i_board[i][j - 1] == interdit && (j > 1))	//check left
				{
					r = check_right(i_player, i_board, i, j - 1);
					if (r != 0 && (r - (j - 1) >= 2))
					{
						i_board[i][j - 1] = vide; i_empty++;
					}
				}

				if (i_board[i][j + 1] == interdit && (j < 8))	 //check right
				{
					l = check_left(i_player, i_board, i, j + 1);
					if (l != 0 && ((j + 1) - l >= 2))
					{
						i_board[i][j + 1] = vide; i_empty++;
					}
				}

				if (i_board[i - 1][j + 1] == interdit && (i > 1 && j < 8))	 //check right up
				{
					ld = check_left_down(i_player, i_board, i - 1, j + 1);
//					jx=ld%10;
					ix=(int) (ld/10);
					if (ld != 0 && (ix - (i - 1) >= 2))
					{
						i_board[i - 1][j + 1] = vide; i_empty++;
					}
				}

				if (i_board[i + 1][j + 1] == interdit && (i < 8 && j < 8))	 //check right down
				{
					if (j > 1)
					{
						lu = check_left_up(i_player, i_board, i + 1, j + 1);
					//	jx=lu%10;
                        ix=(int) (lu/10);
						if (lu != 0 && (i + 1 - ix >= 2))
						{
							i_board[i + 1][j + 1] = vide; i_empty++;
						}
					}
				}

				if (i_board[i - 1][j - 1] == interdit && (i > 1 && j < 8))	 //check left up
				{
					if (i < 8)
					{
						rd = check_right_down(i_player, i_board, i - 1, j - 1);
					//	jx=rd%10;
                        ix=(int) (rd/10);
						if (rd != 0 && (ix - (i - 1) >= 2))
						{
							i_board[i - 1][j - 1] = vide; i_empty++;
						}
					}

				}

				if (i_board[i + 1][j - 1] == interdit && (i < 8 && j < 8))	 //check left down
				{
					if (i > 1)
					{
						ru = check_right_up(i_player, i_board, i + 1, j - 1);
					//	jx=ru%10;
                        ix=(int) (ru/10);
						if (ru != 0 && (i + 1 - ix >= 2))
						{
							i_board[i + 1][j - 1] = vide; i_empty++;
						}
					}

				}
			}
		}
	}
	if (i_empty == 0)
	{
		return 0;
	}
	return i_empty; //retourne le nombre de cases vides jouables
}
/////////////////////////////////////////////////////////////////////////////////:

void flip_up(int i_player, int x, int y, int i_board[9][9])
{
	int i_p, i_pos_up;
	i_p = ennemi(i_player);
	if (i_p == -1 || (i_player != noir && i_player != blanc))
	{
		printf("Invalid player\n.");
		return;
	}
	i_pos_up = check_up(i_player, i_board, x, y);
	if (i_pos_up == 0)
	{
		return;
	}

	int i = x - 1;
	while (i_pos_up <= i)
	{
		i_board[i][y] = i_player;
		i--;
	}
}
void flip_down(int i_player, int x, int y, int i_board[9][9])
{
	int i_p, i_pos_down;
	i_p = ennemi(i_player);
	if (i_p == -1 || (i_player != noir && i_player != blanc))
	{
		printf("Invalid player\n.");
		return;
	}
	i_pos_down = check_down(i_player, i_board, x, y);
	if (i_pos_down == 0)
	{
		return;
	}

	int i = x + 1;
	while (i <= i_pos_down)
	{
		i_board[i][y] = i_player;
		i++;
	}
}
void flip_left(int i_player, int x, int y, int i_board[9][9])
{
	int i_p, i_pos_left;
	i_p = ennemi(i_player);
	if (i_p == -1 || (i_player != noir && i_player != blanc))
	{
		printf("Invalid player\n.");
		return;
	}
	i_pos_left = check_left(i_player, i_board, x, y);
	if (i_pos_left == 0)
	{
		return;
	}

	int j = y - 1;
	while (i_pos_left <= j)
	{
		i_board[x][j] = i_player;
		j--;
	}
}
void flip_right(int i_player, int x, int y, int i_board[9][9])
{
	int p, pos_right;
	p = ennemi(i_player);
	if (p == -1 || (i_player != noir && i_player != blanc))
	{
		printf("Invalid player\n.");
		return;
	}
	pos_right = check_right(i_player, i_board, x, y);
	if (pos_right == 0)
	{
		return;
	}

	int j = y + 1;
	while (j <= pos_right)
	{
		i_board[x][j] = i_player;
		j++;
	}
}
void flip_right_up(int i_player, int x, int y, int i_board[9][9])
{
	int p, check;
	int i_corner=0, j_corner=0;
	p = ennemi(i_player);
	if (p == -1 || (i_player != noir && i_player != blanc))
	{
		printf("Invalid player\n.");
		return;
	}

	check = check_right_up(i_player, i_board, x, y);
	if (check == 0)
	{
		return;
	}
	int i = x - 1, j = y + 1;

	i_corner= (int) (check/10);
	j_corner= check%10;

	if (i_corner == 0 && j_corner == 0)
	{
		return;
	}
	while (i_corner <= i && j <= j_corner)
	{
		i_board[i][j] = i_player;
		i--; j++;
	}
}
void flip_right_down(int i_player, int x, int y, int i_board[9][9])
{
	int p;
	int i_corner=0, j_corner=0;
	p = ennemi(i_player);
	if (p == -1 || (i_player != noir && i_player != blanc))
	{
		printf("Invalid player\n.");
		return;
	}

	int i_check = check_right_down(i_player, i_board, x, y);
	if (i_check == 0)
	{
		return;
	}
	int i = x + 1, j = y + 1;

	i_corner= (int) (i_check/10);
	j_corner= i_check%10;

	if (i_corner == 0 && j_corner == 0)
	{
		return;
	}
	while (i_corner >= i && j <= j_corner)
	{
		i_board[i][j] = i_player;
		i++; j++;
	}
}
void flip_left_up(int i_player, int x, int y, int i_board[9][9])
{
	int p;
	int i_corner=0, j_corner=0;
	p = ennemi(i_player);
	if (p == -1 || (i_player != noir && i_player != blanc))
	{
		printf("Invalid player\n.");
		return;
	}

	int i_check = check_left_up(i_player, i_board, x, y);
	if (i_check == 0)
	{
		return;
	}

	int i = x - 1, j = y - 1;
	i_corner= (int) (i_check/10);
	j_corner= i_check%10;

	if (i_corner == 0 && j_corner == 0)
	{
		return;
	}
	while (i_corner <= i && j_corner <= j)
	{
		i_board[i][j] = i_player;
		i--; j--;
	}
}
void flip_left_down(int i_player, int x, int y, int i_board[9][9])
{
	int p;
	int i_corner=0, j_corner=0;
	p = ennemi(i_player);
	if (p == -1 || (i_player != noir && i_player != blanc))
	{
		printf("Invalid player\n.");
		return;
	}

	int check = check_left_down(i_player, i_board, x, y);
	if (check == 0)
	{
		return;
	}

	int i = x + 1, j = y - 1;
	i_corner= (int) (check/10);
	j_corner= check%10;
	if (i_corner == 0 && j_corner == 0)
	{
		return;
	}
	while (i_corner >= i && j_corner <= j)
	{
		i_board[i][j] = i_player;
		i++; j--;
	}
}
void flip(int i_player, int x, int y, int i_board[9][9])
{
	i_board[x][y] = i_player;
	flip_up(i_player, x, y, i_board);
	flip_down(i_player, x, y, i_board);
	flip_left(i_player, x, y, i_board);
	flip_right(i_player, x, y, i_board);
	flip_right_up(i_player, x, y, i_board);
	flip_right_down(i_player, x, y, i_board);
	flip_left_up(i_player, x, y, i_board);
	flip_left_down(i_player, x, y, i_board);
}


